(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,":root {\n    box-sizing: border-box;\n    font-size: 62.5%;\n}\n\nbody {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    margin: 0;\n}\n\nimg {\n    width: 100%;\n}\n\nh1 {\n    margin: 0;\n}\n\np,input,span{\n    font-size: 2rem !important;\n}\n\n.containerInfo {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 2rem;\n}\n\n.inputName {\n    all : unset;\n    background-color: #D9D9D9;\n    padding: 1rem;\n}\n\n.title {\n    background-color: #D9D9D9;\n    text-align: center;\n    font-size: 2.4rem;\n    padding: 2rem;\n    text-transform: uppercase;\n}\n\n.main {\n    display: grid;\n    grid-template-columns: repeat(2,1fr);\n    place-items: start center;\n}\n\n.playerName {\n    text-align: center;\n    padding-bottom: 2rem;\n}\n\n.row {\n    display: grid;\n    grid-template-columns: repeat(10,1fr);\n}\n\n.letter {\n    position: absolute;\n    top: -2.5rem;\n    right: 35%;\n}\n\n.number {\n    position: absolute;\n    bottom: .5rem;\n    left: -80%;\n}\n\n.cell {\n    width: 40px;\n    height: 40px;\n    border: 1px solid black;\n    position: relative;\n}\n.log {\n    width: 60rem;\n    background-color: #D9D9D9;\n    font-size: 2.2rem;\n    margin : 4rem auto;\n    padding: 1rem;\n    text-align: center;\n    border : 1px solid black;\n}\n\n.busy {\n    background-color: rgba(255, 208, 248, 0.6);\n    border: 1px solid #C521FF;\n}\n\n.position {\n    background-color: rgba(65, 164, 69,0.6);\n    border: 1px solid #109E0D;\n}\n\n.sunk {\n    background-color: rgba(249, 104, 23, 0.3);\n    border: 1px solid #F96817;\n}\n\n.visited {\n    background-color: rgba(140, 131, 242, 0.6);\n    border : 1px solid #2521FF;\n}\n\n.btnContainer {\n    display: flex;\n    justify-content: center;\n}\n\n.btn {\n    padding: .5rem 2rem;\n    font-size: 2.2rem;\n    background-color: #D9D9D9;\n    cursor: pointer;\n    border : 1px solid black;\n}\n\n.elementContainer {\n    margin : 2rem auto;\n    width: 45rem;\n    display: flex;\n    justify-content: center;\n    gap: 2rem;\n    padding-right: 4rem;\n}\n\n\n.op-4 {\n    opacity: .4;\n}","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,mJAAmJ;IACnJ,SAAS;AACb;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,WAAW;IACX,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,iBAAiB;IACjB,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,qCAAqC;AACzC;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,UAAU;AACd;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,yBAAyB;IACzB,iBAAiB;IACjB,kBAAkB;IAClB,aAAa;IACb,kBAAkB;IAClB,wBAAwB;AAC5B;;AAEA;IACI,0CAA0C;IAC1C,yBAAyB;AAC7B;;AAEA;IACI,uCAAuC;IACvC,yBAAyB;AAC7B;;AAEA;IACI,yCAAyC;IACzC,yBAAyB;AAC7B;;AAEA;IACI,0CAA0C;IAC1C,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,yBAAyB;IACzB,eAAe;IACf,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,mBAAmB;AACvB;;;AAGA;IACI,WAAW;AACf",sourcesContent:[":root {\n    box-sizing: border-box;\n    font-size: 62.5%;\n}\n\nbody {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    margin: 0;\n}\n\nimg {\n    width: 100%;\n}\n\nh1 {\n    margin: 0;\n}\n\np,input,span{\n    font-size: 2rem !important;\n}\n\n.containerInfo {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 2rem;\n}\n\n.inputName {\n    all : unset;\n    background-color: #D9D9D9;\n    padding: 1rem;\n}\n\n.title {\n    background-color: #D9D9D9;\n    text-align: center;\n    font-size: 2.4rem;\n    padding: 2rem;\n    text-transform: uppercase;\n}\n\n.main {\n    display: grid;\n    grid-template-columns: repeat(2,1fr);\n    place-items: start center;\n}\n\n.playerName {\n    text-align: center;\n    padding-bottom: 2rem;\n}\n\n.row {\n    display: grid;\n    grid-template-columns: repeat(10,1fr);\n}\n\n.letter {\n    position: absolute;\n    top: -2.5rem;\n    right: 35%;\n}\n\n.number {\n    position: absolute;\n    bottom: .5rem;\n    left: -80%;\n}\n\n.cell {\n    width: 40px;\n    height: 40px;\n    border: 1px solid black;\n    position: relative;\n}\n.log {\n    width: 60rem;\n    background-color: #D9D9D9;\n    font-size: 2.2rem;\n    margin : 4rem auto;\n    padding: 1rem;\n    text-align: center;\n    border : 1px solid black;\n}\n\n.busy {\n    background-color: rgba(255, 208, 248, 0.6);\n    border: 1px solid #C521FF;\n}\n\n.position {\n    background-color: rgba(65, 164, 69,0.6);\n    border: 1px solid #109E0D;\n}\n\n.sunk {\n    background-color: rgba(249, 104, 23, 0.3);\n    border: 1px solid #F96817;\n}\n\n.visited {\n    background-color: rgba(140, 131, 242, 0.6);\n    border : 1px solid #2521FF;\n}\n\n.btnContainer {\n    display: flex;\n    justify-content: center;\n}\n\n.btn {\n    padding: .5rem 2rem;\n    font-size: 2.2rem;\n    background-color: #D9D9D9;\n    cursor: pointer;\n    border : 1px solid black;\n}\n\n.elementContainer {\n    margin : 2rem auto;\n    width: 45rem;\n    display: flex;\n    justify-content: center;\n    gap: 2rem;\n    padding-right: 4rem;\n}\n\n\n.op-4 {\n    opacity: .4;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var A=n[s],d=r.base?A[0]+r.base:A[0],c=o[d]||0,l="".concat(d," ").concat(c);o[d]=c+1;var p=t(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=a(u,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var A=r(n,a),d=0;d<o.length;d++){var c=t(o[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),s=t(565),A=t.n(s),d=t(216),c=t.n(d),l=t(589),p=t.n(l),u=t(402),m={};m.styleTagTransform=p(),m.setAttributes=A(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=c(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const b=(n,e)=>{const t=document.createElement(n);return e&&(t.className=e),t},C=n=>document.querySelector(n),f=["A","B","C","D","E","F","G","H","I","J"],g=n=>{const e=b("div","board");for(let t=0;t<n.length;t+=1){const r=b("div","row");for(let e=0;e<n[t].length;e+=1){const a=b("div","cell");if(n[t][e].shipInformation&&n[t][e].shipInformation.isSunk()&&a.classList.add("sunk"),n[t][e].visited&&a.classList.add("visited"),a.dataset.x=[t],a.dataset.y=[e],r.append(a),0===t){const n=b("span","letter");n.textContent=f[e],a.appendChild(n)}if(0===e){const n=b("span","number");n.textContent=t+1,a.appendChild(n)}}e.append(r)}return e},y=b,B=(n,e)=>{const t=b("div","btnContainer"),r=b("button",`btn ${e}`);return r.textContent=n,t.append(r),t},I=g,h=n=>{const e=b("section",n.player.getName()),t=b("p","playerName");t.textContent=`${n.player.getName()}`;const r=g(n.board.getBoard());r.id=n.player.getName(),e.append(t,r);const a=C(`section.${n.player.getName()}`);if(!a)return e;a.replaceWith(e)},v=C,x=n=>document.querySelectorAll(n),k=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],E=n=>{const e=y("div","root"),t=y("h1","title");t.textContent="Battleship";const r=h(n.playerOne),a=h(n.playerTwo);a.classList.add("op-4");const o=y("main","main");o.append(r,a);const i=y("div","elementContainer"),s=B("Randomise","btnRandomise"),A=B("Reset","btnReset"),d=y("div","dragableElement");d.draggable=!0;const c=y("div","cell busy");d.append(c),i.append(s,d,A);const l=B("Start","btnStart"),p=[i,l];e.append(t,o,...p),document.body.appendChild(e);const u=()=>{x(".board:not(#CPU) .row .cell").forEach((n=>{n.addEventListener("dragover",(n=>{n.preventDefault(),n.currentTarget.classList.add("position")})),n.addEventListener("dragleave",(n=>{n.preventDefault(),n.currentTarget.classList.remove("position")})),n.addEventListener("drop",(n=>{n.preventDefault(),n.currentTarget.classList.add("busy"),n.currentTarget.classList.remove("position")}))}))},m=n=>{let e=".board#CPU";n&&(e=".board:not(#CPU)");const t=x(`${e} .row .cell`),r=n=>{let[e,r]=k();for(;e>n;)[e,r]=k();const a=Array.from({length:n},((n,t)=>[e+t,r])),o=Array.from(t).forEach((n=>{const e=[Number(n.dataset.x),Number(n.dataset.y)];a.some((n=>JSON.stringify(n)===JSON.stringify(e)))&&n.classList.add("busy")}));return o},a=(n,e)=>{for(let t=0;t<n;t+=1)r(e)};a(1,4),a(2,3),a(3,2),a(4,1)},b=()=>{const e=v(".board:not(#CPU)"),t=I(n.playerOne.board.getBoard());e.innerHTML=t.innerHTML,u()},C=n=>{let e=".board#CPU";n&&(e=".board:not(#CPU)");const t=x(`${e} .row .cell`),r=Array.from(t).filter((n=>n.classList.contains("busy"))).map((n=>[Number(n.dataset.x),Number(n.dataset.y)]));return r};return u(),d.addEventListener("dragstart",(()=>{})),s.addEventListener("click",(()=>{b(),m(!0)})),A.addEventListener("click",b),{bindStartGame:n=>{l.addEventListener("click",(()=>{const t=C(!0),r=(m(),C());0!==t.length&&(e.remove(),n([t,r]))}))}}},S=n=>{const e=I(n),t=v(".board:not(#currentPlayer)");t.parentNode.replaceChild(e,t)},w=(n="CPU")=>{const e={};let t=()=>{},r=()=>{};return{getName:()=>n,turn:(a,o=k())=>{for(;e[o];)o=k();const i="CPU"===n;e[o]=!0;const s=a.receiveAttack(o);return t(),r({name:n,coords:o,attack:s}),{attemptTo:o,successfully:s,byComputer:i}},bindOnPlayersChange:n=>{t=n},bindOnLogChange:n=>{r=n}}},L=()=>{const n=[],e=[];for(let e=0;e<10;e+=1){const t=[];for(let n=0;n<10;n+=1)t.push({position:`${e},${n}`});n.push(t)}const t=e=>{const[t,r]=e;return n[t][r]};return{getBoard:()=>n,getPosition:t,getMissedShots:()=>e,placeShip:n=>{const e=t(n);if(e.isShipExist)return;const r=(n=>{let e=0;return{getLength:()=>n,getNumberOfHits:()=>e,hit:()=>{e+=1},isSunk:()=>e===n}})(1);return e.shipInformation=r,e.isShipExist=!0,e},receiveAttack:n=>{const r=t(n);return r.isShipExist?(r.shipInformation.hit(),!0):(e.push(n),r.visited=!0,!1)},allSunk:()=>{const e=[];return n.forEach((n=>n.forEach((n=>{n.shipInformation&&e.push(n)})))),e.every((n=>n.shipInformation.isSunk()))}}},D=(()=>{let n=()=>{};return{bindOnAppInitGame:e=>{const{playerOne:t,playerTwo:r}=e,a=(()=>{const n=y("div","root"),e=y("h1","title");e.textContent="Battleship";const t=y("main","main"),r=y("div","log");r.textContent="Click on a square to start the game!";const a=y("div","btnContainer");return n.append(e,t,r,a),document.body.appendChild(n),{renderPlayers:n=>{Object.values(n).forEach((n=>{const e=h(n);e&&t.append(e)}))},renderBoard:S,renderLog:n=>{let e="hit :D";n.attack||(e="no ship was found >:("),r.textContent=`${n.name} made an attack at [${n.coords}] and ${e}`},renderWinner:n=>{const e=y("button","btn");r.textContent=`${n.getName()} won the game!`,e.textContent="Restart",e.id="btnReset",a.append(e)},bindSquareAttack:n=>{x("#CPU .row .cell").forEach((e=>{(n=>{n.addEventListener("mouseenter",(n=>{n.target.classList.add("position")})),n.addEventListener("mouseleave",(n=>{n.target.classList.remove("position")}))})(e),e.addEventListener("click",(e=>{const t=[Number(e.target.dataset.x),Number(e.target.dataset.y)];n(t)}))}))},bindUserRequestRestart:e=>{v("#btnReset").addEventListener("click",(()=>{n.remove(),e()}))}}})(),o=()=>n(),i=(n,e)=>!!e.board.allSunk()&&(a.renderWinner(n.player),a.bindUserRequestRestart(o),!0),s=n=>{t.player.turn(r.board,n),setTimeout((()=>{r.player.turn(t.board),((n,e)=>i(n,e)||i(e,n))(t,r)||a.bindSquareAttack(s)}),1e3)},A=()=>a.renderPlayers({playerOne:t,playerTwo:r}),d=n=>a.renderLog(n);t.player.bindOnPlayersChange(A),r.player.bindOnPlayersChange(A),t.player.bindOnLogChange(d),r.player.bindOnLogChange(d),a.renderPlayers(e),a.bindSquareAttack(s)},bindOnAppResetGame:e=>{n=e}}})(),O=w("Player"),N=w(),T={playerOne:{player:O,board:L()},playerTwo:{player:N,board:L()}};let P=E(T);const U=n=>{n[0].forEach((n=>T.playerOne.board.placeShip(n))),n[1].forEach((n=>T.playerTwo.board.placeShip(n))),D.bindOnAppInitGame(T)};P.bindStartGame(U),D.bindOnAppResetGame((()=>{T.playerOne.player=w("Player"),T.playerTwo.player=w(),T.playerOne.board=L(),T.playerTwo.board=L(),P=E(T),P.bindStartGame(U)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,